DADOS
    0x00 5      ; utilizado para representar o nésimo valor da sequência Fibonacci
    0x01        ; contador para a quantidade de valores da sequência Fibonacci
    0x02        ; primeiro valor da sequência Fibonacci e resultado do programa caso N = 1
    0x03        ; segundo valor da sequência Fibonacci e resultado do programa caso N = 2
    0x04        ; resultado do programa caso N >= 3

INICIALIZA VALORES:
    0x05 LOAD_M (0x00)     ; Carrega o valor de N no registrador AC
    0x06 STORE_M (0x01)    ; Armazena o valor de N em 0x01 (i)

    0x07 LOAD 1            ; Carrega o valor 1 no registrador AC
    0x08 STORE_M (0x02)    ; Armazena o valor 1 em 0x02, o primeiro valor da sequência

    0x09 LOAD 1            ; Carrega o valor 1 no registrador AC
    0x0A STORE_M (0x03)    ; Armazena o valor 1 em 0x03, o segundo valor da sequência

    0x0B LOAD_M (0x01)     ; Carrega o valor de N no registrador AC
    0x0C SUB 3             ; Subtrai 3 de N no AC
    0x0D JUMP_+M (0x0F)    ; Se N >= 3, salta para o início do loop

    0x0E JUMP_M (0x1D)     ; Senão, fim do programa (N < 3) e portanto se N = 1 a resposta estará em 0x02 e se N = 2 a resposta estará em 0x04

LOOP:
    0x0F LOAD_M (0x01)     ; Carrega o contador i no registrador AC
    0x10 SUB 1             ; Subtrai um de i no registrador AC
    0x11 STORE_M (0x01)    ; Armazena o novo valor de i em 0x0B

    0x12 LOAD_M (0x02)     ; Carrega o primeiro valor da sequencia no registrador AC
    0x13 ADD_M (0x03)      ; Soma com o segundo valor da sequência
    0x14 STORE_M (0x04)    ; Armazena o resultado da soma em 0x04

    0x15 LOAD_M (0x03)     ; Carrega o segundo valor da sequência
    0x16 STORE_M (0x02)    ; Armazena o segundo valor da sequência no primeiro valor da sequência

    0x17 LOAD_M (0x04)     ; Carrega o próximo valor da sequência
    0x18 STORE_M (0x03)    ; Armazena o próximo valor da sequência no segundo valor da sequência

    0x19 LOAD_M (0x01)     ; Carrega o contador i
    0x1A SUB 3             ; Subtrai 3 de i
    0x1B JUMP_+M (0x0F)    ; Se i > 0, salta para o início do loop

    0x1C JUMP_M (0x1D)     ; Senão salta para o fim do programa

FIM:
    0x1D END               ; Fim do programa