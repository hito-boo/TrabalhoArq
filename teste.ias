0x00 20
0x01 2
0x02 13
0x03 0
0x04 29
0x05 32
0x06 8
0x07 10
0x08 16
0x09 13
0x0A
0x0B
0x0C
0x0D 10                                                                        (tam_vetor)
0x0E 0                                                               (início da parte desordenada)
0x0F                                                       (m - quantos elementos a ver na parte desordenada)
0x10                                                                  (menor da parte desordenada)
0x11                                                              (número a ser comparado com o menor)
0X12                                                                  (auxiliar pra fazer switch)
0x13
0x14
0x15
0x16
0x17 LOAD_M (0x0D)                                                               quantos ainda restam
0x18 SUB 1                                                     
0x19 STORE_M (0x0D)
0x1A JUMP_+M (0x1C)
0x1B JUMP_M () END
0x1C LOAD_M *0x0E*                                                setup do percorrer
0x1D STORE_M (0x10)
0x1E JUMP_M (0x1F)
0x1F LOAD_M (0x0D)                                             percorrendo o vetor
0x20 STORE_M (0x0F)
0x21 JUMP_+M (0x23)
0x22 JUMP_M (0x17)
0x23 LOAD_M (0x0E)                                                        ver o proximo
0x24 ADD 1
0x25 STORE_M (0x0E)
0x26 LOAD_M *0x0E*
0x27 STORE_M (0x11)
0x28 JUMP_M (0x29)
0x29 LOAD_M (0x10)                                                 comparacao
0x2A SUB_M (0x11)
0x2C SUB 1
0x2D JUMP_+M (0x35)
0x2E LOAD_M (0x0F)
0x2F SUB 1
0x30 STORE_M (0x0F)
0x31 LOAD_M (0x0E)
0x32 ADD 1
0x33 STORE_M (0x0E)
0x34 JUMP_M (0x23)
0x35 LOAD_M (0x11)                                                              substituição
0x36 STORE_M (0x10)
0x37 LOAD_M (0x0F)
0x38 SUB 1
0x39 STORE_M (0x0F)
0x3A LOAD_M (0x0E)
0x3B ADD 1
0x3C STORE_M (0x0E)
0x3D JUMP_M (0x23)


# FAZER O SWITCH E FAZER O END DEPOIS